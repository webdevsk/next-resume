@tailwind base;
@tailwind components;
@tailwind utilities;

/* pdf.print does not take pdf css margin into account. It will add a margin around the printable area if given inside @page declaration.
So
For web: Give padding to pdf but disable it using @media print
For print: Give margin inside @page declaration 
And negate them twice from pdf initial width*/

/* @pdf property and values have to be raw static css. So use same margin in both --pdf-margin and @page margin manually */
:root {
  --pdf-margin: 3em;
}

@page {
  size: A4 portrait;
  margin: 3em;
}

#pdf {
  max-width: calc(210mm - 0.2mm - var(--pdf-margin) * 2);
  width: 100%;
  @apply bg-white [&_a:hover]:underline;
}

/* puppeteer headless chrome's print screen is weird. The viewport is under 600px and media queries wont work. Giving viewport size in puppeteer settings will only take effect in normal browser mode, but not in print mode. So write initial styles for pdf view then use @media(max-width: 500px) or max-[500px]:propery-value in Tailwind for mobile view when browsing. @media 600px or above screen styles will be ineffective in print mode.*/

@layer base {
  body {
    @apply print:bg-white;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  small,
  span {
    @apply antialiased;
  }

  h1,
  h2,
  h3,
  h4,
  h5 {
    @apply font-bold text-theme;
  }

  h6 {
    @apply font-semibold text-accent;
  }

  p,
  small,
  span {
    @apply font-medium;
  }

  h1 {
    @apply text-4xl max-[500px]:text-3xl;
  }

  h2 {
    @apply text-2xl max-[500px]:text-xl;
  }

  h3 {
    @apply text-xl max-[500px]:text-lg;
  }

  h4 {
    @apply text-lg max-[500px]:text-base;
  }

  h5 {
    @apply text-base max-[500px]:text-sm;
  }

  h6 {
    @apply text-sm max-[500px]:text-xs;
  }

  p {
    @apply text-sm max-[500px]:text-xs;
  }

  small {
    @apply block text-xs;
  }

  span {
    @apply text-sm max-[500px]:text-xs;
  }
}
